<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>KOKORO ÂøÉ - Repasses (Colaboradores)</title>
  <style>
    :root{
      --bg:#0f1115; --card:#141821; --bord:#233043;
      --txt:#e6edf3; --muted:#9fb3c8; --blue:#3b82f6; --green:#22c55e; --amber:#f59e0b; --rose:#f43f5e; --vio:#8b5cf6;
    }
    *{box-sizing:border-box}
    body{margin:0; font-family:system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Arial; background:var(--bg); color:var(--txt); padding:24px}
    .container{max-width:1100px; margin:auto}
    h1{margin:0 0 16px; color:#93c5fd}
    .topbar{display:flex; justify-content:space-between; gap:12px; margin-bottom:16px}
    .btn{border:1px solid #2a3a55; background:#0f172a; color:#cfe4ff; padding:10px 14px; border-radius:8px; text-decoration:none; display:inline-flex; align-items:center; gap:8px; cursor:pointer}
    .btn:hover{border-color:#3b82f6}
    .card{background:linear-gradient(180deg,var(--card),#121725); border:1px solid var(--bord); border-radius:12px; padding:18px; margin:12px 0; box-shadow:0 10px 24px rgba(0,0,0,.25)}
    .grid{display:grid; grid-template-columns:repeat(auto-fit, minmax(220px, 1fr)); gap:14px}
    label{font-size:12px; color:var(--muted)}
    input,select,textarea{width:100%; padding:10px 12px; border:1px solid #2a3a55; border-radius:8px; background:#0f172a; color:#e6edf3; outline:none}
    input:focus,select:focus,textarea:focus{border-color:var(--blue); box-shadow:0 0 0 3px rgba(59,130,246,.15)}
    .actions{display:flex; gap:10px; flex-wrap:wrap; margin-top:10px}
    .primary{background:var(--blue); color:#fff; border:none}
    .good{background:var(--green); color:#001107; border:none}
    .wa{background:var(--vio); color:#fff; border:none}
    .danger{background:var(--rose); color:#fff; border:none}
    .muted{font-size:12px; color:var(--muted)}
    .row{display:flex; gap:10px; align-items:center; flex-wrap:wrap}
    .badge{display:inline-flex; align-items:center; gap:6px; font-weight:700; border-radius:999px; padding:6px 10px; font-size:12px; background:#0b1320; border:1px solid #2a3a55; color:#cfe4ff}
    .preview{min-height:160px}
  </style>
</head>
<body>
  <div class="container">
    <div class="topbar">
      <a class="btn" href="/admin/index.html">‚Üê Voltar ao Admin</a>
      <a class="btn" href="/admin/financeiro/financeiro.html">Finan√ßas</a>
    </div>

    <h1>Repasses (Colaboradores)</h1>
    <div class="card" id="export-bar-fallback" style="margin-top:10px;padding:10px;display:flex;gap:8px;">
      <button type="button" id="btn-export-csv" class="btn btn-ghost">Exportar CSV</button>
    </div>

<div class="card" style="margin-top:20px;padding:15px;border:1px solid #333;border-radius:8px;">
  <h2>üí∞ Calculadora de Repasses</h2>
  <label>Valor Recebido (R$):</label>
  <input type="number" id="valorRecebido" step="0.01" placeholder="0,00" />

  <label>Repasse (%) :</label>
  <input type="number" id="percentual" step="0.01" placeholder="%" />

  <label>Repasse (R$) :</label>
  <input type="number" id="valorRepasse" step="0.01" placeholder="0,00" />

  <p>üí° Academia fica com: <span id="valorAcademia">R$ 0,00</span></p>
  <p>üë§ Colaborador recebe: <span id="valorColaborador">R$ 0,00</span></p>
</div>

<script>
function atualizarCalculo(base){
  const vRecebido = parseFloat(document.getElementById("valorRecebido").value)||0;
  const vPerc = parseFloat(document.getElementById("percentual").value)||0;
  const vRep = parseFloat(document.getElementById("valorRepasse").value)||0;

  if(base==="percentual"){
    const repasse = vRecebido * (vPerc/100);
    document.getElementById("valorRepasse").value = repasse.toFixed(2);
    document.getElementById("valorColaborador").innerText = repasse.toLocaleString("pt-BR",{style:"currency",currency:"BRL"});
    document.getElementById("valorAcademia").innerText = (vRecebido - repasse).toLocaleString("pt-BR",{style:"currency",currency:"BRL"});
  }
  else if(base==="valor"){
    const perc = vRecebido>0 ? (vRep/vRecebido)*100 : 0;
    document.getElementById("percentual").value = perc.toFixed(2);
    document.getElementById("valorColaborador").innerText = vRep.toLocaleString("pt-BR",{style:"currency",currency:"BRL"});
    document.getElementById("valorAcademia").innerText = (vRecebido - vRep).toLocaleString("pt-BR",{style:"currency",currency:"BRL"});
  }
}

document.getElementById("percentual").addEventListener("input",()=>atualizarCalculo("percentual"));
document.getElementById("valorRepasse").addEventListener("input",()=>atualizarCalculo("valor"));
document.getElementById("valorRecebido").addEventListener("input",()=>atualizarCalculo("percentual"));
</script>


    <div class="card">
      <div class="grid">
        <div>
          <label>Admin Secret (salvo localmente)</label>
          <input id="admin-secret" type="password" placeholder="cole aqui seu x-admin-secret"/>
          <div class="muted">Fica salvo s√≥ neste navegador (localStorage).</div>
        </div>
        <div>
          <label>Professor (ID)</label>
          <input id="prof-id" placeholder="ex.: uuid do professor"/>
        </div>
        <div>
          <label>Nome (s√≥ para refer√™ncia visual)</label>
          <input id="prof-nome" placeholder="opcional; n√£o vai para o servidor"/>
        </div>
        <div>
          <label>Faixa</label>
          <input id="faixa" placeholder='ex.: "preta", "preta 3¬∫", "marrom", "roxa", "azul"'/>
        </div>
        <div>
          <label>√â Titular?</label>
          <select id="eh-titular">
            <option value="nao">N√£o</option>
            <option value="sim">Sim</option>
          </select>
        </div>
        <div>
          <label>M√©todo</label>
          <select id="metodo">
            <option>PIX</option>
            <option>Dinheiro</option>
            <option>Cart√£o</option>
            <option>Transfer√™ncia</option>
          </select>
        </div>
        <div>
          <label>Valor (R$)</label>
          <input id="valor" type="number" step="0.01" placeholder="0,00"/>
        </div>
        <div>
          <label>Pago em (data/hora)</label>
          <input id="pago-em" type="datetime-local"/>
        </div>
        <div>
          <label>Enviar E-mail para</label>
          <input id="email" type="email" placeholder="ex.: nome@dominio.com"/>
        </div>
        <div>
          <label>Enviar WhatsApp para</label>
          <input id="whats" placeholder="ex.: +55DDDNUMERO"/>
        </div>
      </div>

      <div class="actions">
        <button class="btn primary" id="btn-preview">Pr√©-visualizar</button>
        <button class="btn good" id="btn-email">Enviar por E-mail</button>
        <button class="btn wa" id="btn-wa">Enviar por WhatsApp</button>
        <button class="btn danger" id="btn-limpar">Limpar</button>
        <span class="badge" id="calc-badge">T√≠tulo: ‚Äî</span>
      </div>
      <div style="margin-top:10px">
        <label>Pr√©-visualiza√ß√£o do texto</label>
        <textarea id="preview" class="preview" readonly></textarea>
      </div>
      <div class="muted">Dica: se o nome no banco j√° vier com sufixo (ex.: ‚ÄúC√©sar (Auxiliar)‚Äù), o sistema ignora e calcula o t√≠tulo correto pela faixa/titularidade.</div>
    </div>
  </div>

<script>
// ===== labelTitle (mesma regra do servidor) =====
function labelTitle(extra){
  const rawFaixa = String(extra.faixa||'');
  const titular = !!(extra.eh_titular || extra.is_titular);
  const norm = s => String(s||'').normalize('NFD').replace(/[\u0300-\u036f]/g,'').toLowerCase();
  const f = norm(rawFaixa);

  if (titular) return 'Prof. Titular';

  if (/azul/.test(f) || /roxa?/.test(f)) return 'Mon.';
  if (/marrom/.test(f)) return 'Instr.';

  if (/preta/.test(f)) {
    if (/\b(3|3o|3¬∫|4|4o|4¬∫|5|5o|5¬∫|6|6o|6¬∫)\b/.test(f)) return 'Prof.';
    if (/lisa/.test(f) || /\b(1|1o|1¬∫|2|2o|2¬∫)\b/.test(f)) return 'Instr.';
    return 'Instr.';
  }
  if (/vermelha\s*e\s*preta/.test(f) || /\b7\b/.test(f)) return 'M.';
  if (/vermelha\s*e\s*branca/.test(f) || /\b8\b/.test(f)) return 'G.M.';
  if (/vermelha/.test(f) && /\b9\b/.test(f)) return 'G.M.';
  if (/vermelha/.test(f) && /\b10\b/.test(f)) return 'V.M.';

  return 'Colaborador';
}

function byId(id){ return document.getElementById(id); }
function loadSecret(){ const v=localStorage.getItem('kokoro_admin_secret'); if(v) byId('admin-secret').value=v; }
function saveSecret(){ const v=byId('admin-secret').value.trim(); if(v) localStorage.setItem('kokoro_admin_secret', v); }

function buildBody(){
  const body = {
    professor_id: byId('prof-id').value.trim(),
    valor_pago: Number(byId('valor').value||0),
    metodo: byId('metodo').value,
    pago_em: byId('pago-em').value ? new Date(byId('pago-em').value).toISOString() : undefined,
    faixa: byId('faixa').value.trim() || undefined,
    eh_titular: byId('eh-titular').value === 'sim',
  };
  return body;
}

function fmtBRL(n){ return (Number(n)||0).toLocaleString('pt-BR',{style:'currency',currency:'BRL'}); }

async function callAPI(path, body, extraHeaders){
  const secret = byId('admin-secret').value.trim();
  if(!secret){ alert('Informe o Admin Secret.'); throw new Error('sem secret'); }
  const resp = await fetch(path, {
    method: 'POST',
    headers: {'Content-Type':'application/json','x-admin-secret': secret, ...(extraHeaders||{})},
    body: JSON.stringify(body)
  });
  const data = await resp.json().catch(()=> ({}));
  if(!resp.ok){ throw new Error(data?.error || ('HTTP '+resp.status)); }
  return data;
}

async function doPreview(){
  const body = buildBody();
  const titulo = labelTitle(body);
  byId('calc-badge').textContent = 'T√≠tulo: ' + titulo;

  // usa /api/financeiro/recibo (gera texto e retorna JSON)
  const data = await callAPI('/api/financeiro/recibo', body);
  const texto = data?.texto || '(sem texto)';
  byId('preview').value = texto.replace('Colaborador: ', `Colaborador: `); // apenas garante render
}

async function doEmail(){
  const body = buildBody();
  const to = byId('email').value.trim();
  if(!to){ alert('Informe o e-mail de destino.'); return; }
  body.para_email = to;
  const data = await callAPI('/api/financeiro/recibo_email', body);
  byId('preview').value = data?.preview_texto || '(enviado; sem pr√©via)';
  alert('E-mail enviado ‚úî');
}

async function doWhats(){
  const body = buildBody();
  const to = byId('whats').value.trim();
  if(!to){ alert('Informe o n√∫mero WhatsApp destino.'); return; }
  body.destino_whatsapp = to;
  const data = await callAPI('/api/financeiro/recibo_whatsapp', body);
  byId('preview').value = data?.preview_texto || '(enviado; sem pr√©via)';
  alert('WhatsApp enviado ‚úî');
}

function limpar(){
  ['prof-id','prof-nome','faixa','valor','pago-em','email','whats'].forEach(id=> byId(id).value='');
  byId('eh-titular').value='nao';
  byId('metodo').value='PIX';
  byId('preview').value='';
  byId('calc-badge').textContent='T√≠tulo: ‚Äî';
}

document.addEventListener('DOMContentLoaded', ()=>{
  loadSecret();
  byId('admin-secret').addEventListener('change', saveSecret);
  byId('btn-preview').addEventListener('click', ()=>doPreview().catch(e=>alert(e.message||e)));
  byId('btn-email').addEventListener('click', ()=>doEmail().catch(e=>alert(e.message||e)));
  byId('btn-wa').addEventListener('click', ()=>doWhats().catch(e=>alert(e.message||e)));
  byId('btn-limpar').addEventListener('click', limpar);
});
</script>

<!-- ========== Registrar no servidor (Repasses) ========== -->
<section class="card" id="kkr-registrar-repasse" style="margin-top:16px">
  <h2>Registrar Repasse no Servidor</h2>
  <div class="form-grid">
    <div class="form-group">
      <label for="kkr-prof-id">Professor ID (UUID)</label>
      <input id="kkr-prof-id" type="text" placeholder="ex.: baed8b13-f510-4c37-bd1e-60e809af1d93">
      <div class="hint">Pegue da lista de professores (ou do pr√≥prio recibo).</div>
    </div>
    <div class="form-group">
      <label for="kkr-base">Valor recebido (R$)</label>
      <input id="kkr-base" type="number" step="0.01" placeholder="ex.: 230">
    </div>
    <div class="form-group">
      <label for="kkr-pct">Repasse (%)</label>
      <input id="kkr-pct" type="number" step="0.0001" placeholder="ex.: 30">
    </div>
    <div class="form-group">
      <label for="kkr-repasse">Repasse (R$)</label>
      <input id="kkr-repasse" type="number" step="0.01" placeholder="ex.: 69">
      <div class="hint">Preencha % OU R$ ‚Äî o outro √© calculado.</div>
    </div>
    <div class="form-group">
      <label for="kkr-metodo">M√©todo</label>
      <select id="kkr-metodo"><option>PIX</option><option>Dinheiro</option><option>Cart√£o</option><option>TED</option></select>
    </div>
    <div class="form-group">
      <label for="kkr-pago-em">Pago em</label>
      <input id="kkr-pago-em" type="datetime-local">
    </div>
    <div class="form-group" style="grid-column:1/-1">
      <label for="kkr-obs">Observa√ß√£o</label>
      <input id="kkr-obs" type="text" placeholder="Ex.: Repasse da turma 09/2025 ‚Äì 3 aulas">
    </div>
    <div class="form-group" style="grid-column:1/-1">
      <label for="kkr-ref">Refer√™ncia (√∫nica)</label>
      <input id="kkr-ref" type="text" placeholder="Se vazio, o sistema gera uma automaticamente">
      <div class="hint">Usada para evitar duplicidade. Se repetir, o registro √© atualizado.</div>
    </div>
    <div class="form-actions" style="grid-column:1/-1; display:flex; gap:10px; justify-content:flex-end">
      <button type="button" class="btn btn-ghost" id="btn-set-secret">Configurar Admin Secret</button>
      <button type="button" class="btn btn-principal" id="btn-registrar-repasse">Registrar no servidor</button>
    </div>
    <div id="kkr-status" class="hint" style="grid-column:1/-1"></div>
  </div>
</section>

<script>
(function(){
  const $ = (q)=>document.querySelector(q);
  const getNum = (el)=>{ const v=parseFloat(el.value.replace(',','.')); return isFinite(v)?v:0; };
  const setNum = (el,val,dec=2)=>{ el.value = (isFinite(val)? val:0).toFixed(dec); };

  const SECRET_KEY = 'kkr_admin_secret';
  const getSecret = ()=> localStorage.getItem(SECRET_KEY)||'';
  const setSecret = ()=>{ const v=prompt('Cole seu ADMIN_SECRET'); if(v){ localStorage.setItem(SECRET_KEY,v); alert('OK: secret salvo no navegador.'); } };

  const base = $('#kkr-base'), pct = $('#kkr-pct'), rep = $('#kkr-repasse');

  // sincroniza % <-> R$
  pct.addEventListener('input', ()=>{ const b=getNum(base), p=getNum(pct); if(b>0){ setNum(rep, b*(p/100)); } });
  rep.addEventListener('input', ()=>{ const b=getNum(base), r=getNum(rep); if(b>0){ setNum(pct, (r/b)*100, 4); } });

  // tenta puxar valores da calculadora j√° existente (se tiver)
  try{
    const guessBase = document.querySelector('#valor-recebido, #calc-valor-recebido, [data-id="valor-recebido"]');
    const guessPct  = document.querySelector('#repasse-pct, #repasse-percent, [data-id="repasse-percent"]');
    const guessRep  = document.querySelector('#repasse-valor, #repasse-rs, [data-id="repasse-valor"]');
    if(guessBase && !base.value) base.value = guessBase.value || '';
    if(guessPct  && !pct.value)  pct.value  = guessPct.value || '';
    if(guessRep  && !rep.value)  rep.value  = guessRep.value || '';
  }catch(_){}

  // refer√™ncia autom√°tica ao focar o campo se estiver vazio
  $('#kkr-ref').addEventListener('focus', ()=>{
    const r = $('#kkr-ref'); if(r.value) return;
    const pid = ($('#kkr-prof-id').value||'xxxx').slice(0,8);
    const b   = getNum(base), v = getNum(rep);
    const ym  = new Date().toISOString().slice(0,7).replace('-','');
    r.value = `rep-${ym}-${pid}-${Math.round(b*100)}-${Math.round(v*100)}`;
  });

  $('#btn-set-secret').addEventListener('click', setSecret);

  $('#btn-registrar-repasse').addEventListener('click', async ()=>{
    const status = $('#kkr-status'); status.textContent = 'Enviando...';
    const adminSecret = getSecret();
    if(!adminSecret){ alert('Configure o Admin Secret primeiro.'); status.textContent=''; return; }

    const payload = {
      professor_id: $('#kkr-prof-id').value.trim(),
      base_valor: getNum(base),
      percent: getNum(pct),
      repasse_valor: getNum(rep),
      metodo: $('#kkr-metodo').value,
      pago_em: $('#kkr-pago-em').value || null,
      observacao: $('#kkr-obs').value || null,
      referencia: $('#kkr-ref').value || null
    };
    if(!payload.professor_id){ alert('Informe o Professor ID'); status.textContent=''; return; }

    try{
      const resp = await fetch('/api/financeiro/repasses_record', {
        method:'POST',
        headers:{'Content-Type':'application/json','x-admin-secret':adminSecret},
        body: JSON.stringify(payload)
      });
      const data = await resp.json();
      if(!resp.ok || !data.ok){ throw new Error(data.error||('HTTP '+resp.status)); }
      status.textContent = '‚úÖ Registrado com sucesso (id '+data.repasse.id+').';
    }catch(e){
      status.textContent = '‚ùå Erro: '+ String(e.message||e);
    }
  });
})();
</script>


<section class="card" id="kkr-repasses-lista" style="margin-top:16px">
  <h2>Hist√≥rico de Repasses</h2>
  <div class="form-grid">
    <div class="form-group"><label>Professor ID</label><input id="flt-prof" type="text" placeholder="UUID"></div>
    <div class="form-group"><label>De</label><input id="flt-from" type="date"></div>
    <div class="form-group"><label>At√©</label><input id="flt-to" type="date"></div>
    <div class="form-group"><label>Busca</label><input id="flt-search" type="text" placeholder="refer√™ncia/observa√ß√£o"></div>
    <div class="form-actions"><button type="button" class="btn btn-principal" id="btn-carregar">Carregar</button></div>
  </div>
  <div class="hint" id="sum-totais" style="margin:.5rem 0"></div>
  <div style="overflow:auto">
    <table style="width:100%; border-collapse:collapse" id="tbl-repasses">
      <thead>
        <tr>
          <th style="text-align:left">Pago em</th>
          <th style="text-align:left">Professor</th>
          <th style="text-align:right">Base (R$)</th>
          <th style="text-align:right">% Rep.</th>
          <th style="text-align:right">Repasse (R$)</th>
          <th style="text-align:left">M√©todo</th>
          <th style="text-align:left">Ref.</th>
          <th style="text-align:left">Obs.</th>
        </tr>
      </thead>
      <tbody id="rows-repasses"></tbody>
    </table>
  </div>
</section>

<script>
(function(){
  const SECRET_KEY='kkr_admin_secret';
  const getSecret = ()=>localStorage.getItem(SECRET_KEY)||'';
  const fmtBR = (n,dec=2)=> (Number(n)||0).toLocaleString('pt-BR',{minimumFractionDigits:dec, maximumFractionDigits:dec});
  const qs=(q)=>document.querySelector(q);

  async function carregar(){
    const params = new URLSearchParams();
    const pid = qs('#flt-prof').value.trim(); if(pid) params.set('professor_id', pid);
    const f = qs('#flt-from').value; if(f) params.set('from', f);
    const t = qs('#flt-to').value;   if(t) params.set('to', t);
    const s = qs('#flt-search').value.trim(); if(s) params.set('search', s);
    const url = '/api/financeiro/repasses_list?'+params.toString();

    const sec = getSecret();
    if(!sec){ alert('Configure o Admin Secret no bloco acima.'); return; }

    const resp = await fetch(url, { headers: { 'x-admin-secret': sec } });
    const data = await resp.json();
    if(!resp.ok || !data.ok){ throw new Error(data.error||('HTTP '+resp.status)); }

    const tb = qs('#rows-repasses'); tb.innerHTML='';
    for(const it of data.items){
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${new Date(it.pago_em).toLocaleString('pt-BR',{ timeZone:'America/Sao_Paulo' })}</td>
        <td><code>${it.professor_id}</code></td>
        <td style="text-align:right">${fmtBR(it.base_valor)}</td>
        <td style="text-align:right">${fmtBR(it.percent,4)}</td>
        <td style="text-align:right"><b>${fmtBR(it.repasse_valor)}</b></td>
        <td>${it.metodo||'‚Äî'}</td>
        <td>${it.referencia||'‚Äî'}</td>
        <td>${it.observacao||'‚Äî'}</td>

      tb.appendChild(tr);
    }
    qs('#sum-totais').textContent =
      `Total linhas: ${data.total.count} ‚Ä¢ Base: R$ ${fmtBR(data.total.base_total)} ‚Ä¢ Repasses: R$ ${fmtBR(data.total.repasse_total)}`;
  }

  const btn = document.querySelector('#btn-carregar');
  if(btn){ btn.addEventListener('click', ()=>carregar().catch(e=>alert('Erro: '+e.message))); }

  // auto-carrega na primeira abertura
  setTimeout(()=>{ if(btn) btn.click(); }, 300);
})();

/* ==== Exportar PDF (imprimir) da tabela filtrada ==== */
(function(){
  const btn = document.getElementById('btn-exportar-pdf');
  const tbl = document.getElementById('tabela-lancamentos');
  if(!btn || !tbl) return;

  function parseBRL(s){
    if(!s) return 0;
    const num = String(s).replace(/[^0-9,.-]/g,'').replace(/\./g,'').replace(',', '.');
    return Number(num)||0;
  }

  function getFiltrosResumo(){
    const get = id => document.getElementById(id);
    const v = el => el ? el.value : '';
    return {
      colaborador: v(get('f-colaborador')),
      status:      v(get('f-status')),
      de:          v(get('f-data-de')),
      ate:         v(get('f-data-ate')),
      min:         v(get('f-min')),
      max:         v(get('f-max')),
      ord:         v(get('f-ordenar')),
    };
  }

  btn.addEventListener('click', ()=>{
    // Coleta linhas vis√≠veis da tabela
    const rows = [];
    let total = 0;
    tbl.querySelectorAll('tr').forEach(tr=>{
      const tds = tr.querySelectorAll('td');
      if (tds.length >= 5) {
        const linha = {
          data: tds[0].innerText || '',
          colaborador: tds[1].innerText || '',
          desc: tds[2].innerText || '',
          valor: tds[3].innerText || '',
          status: tds[4].innerText || ''
        };
        rows.push(linha);
        total += parseBRL(linha.valor);
      }
    });

    // Monta HTML de impress√£o
    const filtros = getFiltrosResumo();
    const dt = new Date();
    const pad2 = n=>String(n).padStart(2,'0');
    const agora = `${pad2(dt.getDate())}/${pad2(dt.getMonth()+1)}/${dt.getFullYear()} ${pad2(dt.getHours())}:${pad2(dt.getMinutes())}`;

    const css = `
      <style>
        @media print {
          @page { size: A4 portrait; margin: 16mm; }
        }
        body { font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color:#111; }
        h1 { margin:0 0 6px; font-size:18pt; }
        .muted { color:#555; font-size:10pt; margin-bottom:14px; }
        .chips { display:flex; gap:8px; flex-wrap:wrap; margin:8px 0 14px; }
        .chip { background:#eef2ff; border:1px solid #c7d2fe; color:#1e293b; padding:4px 8px; border-radius:999px; font-size:9pt; }
        table { width:100%; border-collapse: collapse; }
        th, td { border-bottom:1px solid #e5e7eb; padding:8px 10px; font-size:10.5pt; text-align:left; }
        th { background:#f8fafc; }
        td.valor, th.valor { text-align: right; white-space: nowrap; }
        .total { text-align:right; font-weight:700; margin-top:10px; }
        .footer { margin-top:24px; font-size:9pt; color:#555; }
      </style>


    const tableHead = `
      <thead>
        <tr>
          <th>Data</th>
          <th>Colaborador</th>
          <th>Descri√ß√£o / Aluno</th>
          <th class="valor">Valor</th>
          <th>Status</th>
        </tr>
      </thead>`;

    const tableBody = rows.map(r=>`
      <tr>
        <td>${r.data}</td>
        <td>${r.colaborador}</td>
        <td>${r.desc}</td>
        <td class="valor">${r.valor}</td>
        <td>${r.status}</td>
      </tr>
    `).join('');

    const filtrosChips = Object.entries(filtros)
      .filter(([k,v])=>String(v||'').trim()!=='')
      .map(([k,v])=>`<span class="chip">${k}: <b>${String(v)}</b></span>`).join('');

    const somaFmt = total.toLocaleString('pt-BR',{style:'currency',currency:'BRL'});

    const html = `
      <!doctype html>
      <html>
      <head><meta charset="utf-8">${css}<title>Repasses - PDF</title></head>
      <body>
        <h1>Relat√≥rio de Repasses (Filtrados)</h1>
        <div class="muted">Gerado em ${agora} ‚Ä¢ planckkokoro.com</div>
        <div class="chips">${filtrosChips || '<span class="chip">Sem filtros</span>'}</div>
        <table>${tableHead}<tbody>${tableBody}</tbody></table>
        <div class="total">Total (linhas vis√≠veis): <span>${somaFmt}</span></div>
        <div class="footer">Observa√ß√£o: este PDF reflete exatamente o que est√° filtrado/vis√≠vel na tela de repasses.</div>
        <script>window.print(); setTimeout(()=>window.close(), 400);</script>
      </body>
      </html>


  });
})();

</script>


<script>
(function(){
  const tabela = document.getElementById('tabela-lancamentos');
  if(!tabela) return;

  const elTotal = document.getElementById('res-total');
  const elQtd   = document.getElementById('res-qtd');
  const elMedia = document.getElementById('res-media');
  const elTop   = document.getElementById('res-top');
  const tbBody  = document.getElementById('tb-por-colab');

  function parseBRL(s){
    if(!s) return 0;
    const num = String(s).replace(/[^0-9,.-]/g,'').replace(/\./g,'').replace(',', '.');
    return Number(num)||0;
  }
  function fmtBRL(n){
    return (Number(n)||0).toLocaleString('pt-BR',{style:'currency',currency:'BRL'});
  }

  function recompute(){
    const map = new Map(); // nome -> {qtd, total}
    let total = 0, qtd = 0;

    tabela.querySelectorAll('tr').forEach(tr=>{
      const tds = tr.querySelectorAll('td');
      if (tds.length >= 5 && tr.offsetParent !== null) {
        // mesma conven√ß√£o do export PDF: 0 data, 1 colaborador, 2 desc, 3 valor, 4 status
        const nome  = (tds[1]?.innerText||'').trim() || '‚Äî';
        const valor = parseBRL(tds[3]?.innerText||'');
        if(!Number.isFinite(valor)) return;
        total += valor; qtd += 1;
        const cur = map.get(nome) || {q:0, t:0};
        cur.q += 1; cur.t += valor;
        map.set(nome, cur);
      }
    });

    // cards
    elTotal.textContent = fmtBRL(total);
    elQtd.textContent   = String(qtd);
    elMedia.textContent = fmtBRL(qtd ? (total/qtd) : 0);

    // top colaborador
    let topNome = '‚Äî', topVal = -1;
    for(const [nome,agg] of map.entries()){
      if(agg.t > topVal){ topVal = agg.t; topNome = `${nome} (${fmtBRL(agg.t)})`; }
    }
    elTop.textContent = topNome;

    // tabela por colaborador (ordenada por total desc)
    const arr = Array.from(map.entries()).map(([nome,agg])=>({nome,q:agg.q,t:agg.t}));
    arr.sort((a,b)=>b.t - a.t);
    tbBody.innerHTML = arr.map(r=>`
      <tr>
        <td style="padding:8px 10px;border-bottom:1px solid #2d2d2d">${r.nome}</td>
        <td style="padding:8px 10px;border-bottom:1px solid #2d2d2d;text-align:right">${r.q}</td>
        <td style="padding:8px 10px;border-bottom:1px solid #2d2d2d;text-align:right">${fmtBRL(r.t)}</td>
      </tr>
    `).join('') || '<tr><td colspan="3" style="padding:10px;color:#9aa7b5">Sem linhas no filtro atual</td></tr>';
  }

  // Recalcula:
  // 1) ao carregar
  document.addEventListener('DOMContentLoaded', recompute);
  // 2) quando a tabela mudar (ex.: filtros reaplicam linhas)
  const mo = new MutationObserver(()=>recompute());
  mo.observe(tabela, {childList:true, subtree:true, characterData:true});
  // 3) quando inputs de filtro mudarem
  ['f-colaborador','f-status','f-data-de','f-data-ate','f-min','f-max','f-ordenar'].forEach(id=>{
    const el = document.getElementById(id);
    if(el) el.addEventListener('input', ()=>setTimeout(recompute, 50));
    if(el) el.addEventListener('change', ()=>setTimeout(recompute, 50));
  });

  // se existir um bot√£o "Aplicar filtros", observe tamb√©m
  const btnAplicar = document.getElementById('btn-aplicar-filtros');
  if(btnAplicar) btnAplicar.addEventListener('click', ()=>setTimeout(recompute, 80));

  // fallback: recalcular ap√≥s 1s (ajuda em loaders ass√≠ncronos)
  setTimeout(recompute, 1000);
})();
</script>


<script>
document.addEventListener("DOMContentLoaded", () => {
  const btnCsv = document.getElementById("btn-export-csv");
  if (btnCsv) {
    btnCsv.addEventListener("click", () => {
      try {
        const rows = [["Data","Descri√ß√£o","Valor","Status"]];
        document.querySelectorAll("#tabela-lancamentos tr").forEach(tr=>{
          const cols=[...tr.querySelectorAll("td")].map(td=>td.innerText.trim());
          if(cols.length) rows.push(cols);
        });
        const csvContent = rows.map(r=>r.map(v=>`"${v}"`).join(",")).join("\n");
        const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
        const url = URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = "repasses.csv";
        a.click();
        URL.revokeObjectURL(url);
      } catch(e) {
        alert("Erro ao gerar CSV: " + e);
      }
    });
  }
});
</script>


<script>
(function(){
  function generateCsvFromTable() {
    const rows = [["Data","Descri√ß√£o / Aluno","Plano / Dias","Valor","Status","A√ß√µes"]];
    const trs = document.querySelectorAll("#tabela-lancamentos tr");
    trs.forEach(tr=>{
      const cols=[...tr.querySelectorAll("td")].map(td=>td.innerText.replace(/\s+/g,' ').trim());
      if (cols.length) rows.push(cols);
    });
    const csv = rows.map(r=>r.map(v=>`"${(v||'').replace(/"/g,'""')}"`).join(",")).join("\n");
    const blob = new Blob([csv], { type: "text/csv;charset=utf-8;" });
    const url = URL.createObjectURL(blob);
    const a=document.createElement("a"); a.href=url; a.download="repasses.csv"; a.click();
    URL.revokeObjectURL(url);
  }
  document.addEventListener("DOMContentLoaded", () => {
    const btn = document.getElementById("btn-export-csv");
    if (btn) btn.addEventListener("click", generateCsvFromTable);
  });
})();
</script>
