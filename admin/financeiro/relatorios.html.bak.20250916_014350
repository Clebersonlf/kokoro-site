<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>KOKORO 心 - Relatórios Financeiros</title>
  <link rel="stylesheet" href="/admin/css/linkbtn.css">
  <link rel="stylesheet" href="/admin/css/btns.css">
  <style>
    :root { --cor-fundo:#121212; --cor-container:#1a1a1a; --cor-borda:#333;
            --cor-texto-principal:#f0f0f0; --cor-azul:#3498db; }
    body{margin:0;background:var(--cor-fundo);color:var(--cor-texto-principal);font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Arial}
    .container{max-width:1600px;margin:0 auto;padding:24px}
    .topbar{display:flex;gap:12px;justify-content:flex-end;padding:10px 16px}
    .btn{border:1px solid #334155;border-radius:.6rem;background:#111827;color:#bfdbfe;text-decoration:none;padding:.55rem .9rem}
    .btn:hover{border-color:#3b82f6;color:#dbeafe}
    h1{color:var(--cor-azul);text-align:center;margin:8px 0 20px}
    .grid{display:grid;gap:16px;grid-template-columns:repeat(auto-fit,minmax(260px,1fr))}
    .card{background:linear-gradient(180deg,#1a1a1a,#171717);border:1px solid var(--cor-borda);border-radius:12px;padding:16px}
    .kpis{display:grid;gap:12px;grid-template-columns:repeat(3,1fr);margin:16px 0}
    .kpi{background:#181818;border:1px solid #2a2a2a;border-radius:10px;padding:14px;text-align:center}
    .kpi h3{margin:2px 0 6px;font-size:.95rem;opacity:.8}
    .kpi p{margin:0;font-weight:800;font-size:1.5rem}
    .toolbar{display:flex;flex-wrap:wrap;gap:8px;align-items:center;margin:8px 0 16px}
    .toolbar input,.toolbar select,.toolbar button{background:#2a2a2a;color:#fff;border:1px solid #3a3a3a;border-radius:8px;padding:10px}
    canvas{width:100%;height:320px;max-height:420px}
    .muted{opacity:.75;font-size:.9rem}
  </style>
  <script src="https://cdn.jsdelivr.net/npm/docx@8.5.0/build/index.umd.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js"></script>
</head>
<body>
  <nav class="topbar">
    <a class="btn" href="/admin/financeiro/financeiro.html">← Voltar ao Financeiro</a>
    <a class="btn" href="/admin/index.html">Admin</a>
  </nav>
  <div class="container">
    <h1>Relatórios Financeiros</h1>

    <div class="toolbar">
      <select id="preset">
        <option value="30">Últimos 30 dias</option>
        <option value="90">Últimos 90 dias</option>
        <option value="365" selected>Últimos 12 meses</option>
        <option value="custom">Personalizado…</option>
      </select>
      <input type="date" id="ini" />
      <input type="date" id="fim" />
      <button id="btn-atualizar">Atualizar</button>
      <button id="btn-pdf">Gerar PDF</button>
      <button id="btn-docx">Gerar DOCX</button>
    </div>

    <div class="kpis">
      <div class="kpi"><h3>Receitas</h3><p id="kpi-receitas">R$ 0,00</p></div>
      <div class="kpi"><h3>Despesas + Repasses</h3><p id="kpi-despesas">R$ 0,00</p></div>
      <div class="kpi"><h3>Saldo</h3><p id="kpi-saldo">R$ 0,00</p></div>
    </div>

    <div class="grid">
      <div class="card"><h3>Receitas vs Despesas (Linha)</h3><canvas id="chartLinha"></canvas></div>
      <div class="card"><h3>Composição de Receita (Pizza)</h3><canvas id="chartPizza"></canvas></div>
      <div class="card"><h3>Receitas por Mês (Barras)</h3><canvas id="chartBarras"></canvas></div>
      <div class="card"><h3>Despesas & Repasses por Mês (Colunas)</h3><canvas id="chartColunas"></canvas></div>
    </div>

    <p class="muted">v1: esta tela já está online. Na próxima etapa, conectaremos estes gráficos diretamente às APIs /api/financeiro para dados 100% do backend.</p>
  </div>

  <!-- Chart.js CDN (leve) -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
  const fmtBR = n => (Number(n)||0).toLocaleString('pt-BR',{style:'currency',currency:'BRL'});

  // v1: dados de amostra locais (substituiremos por fetch às APIs)
  function dadosMock(){
    const meses = Array.from({length:12},(_,i)=>new Date(new Date().getFullYear(), new Date().getMonth()-11+i, 1))
      .map(d=>d.toLocaleDateString('pt-BR',{month:'short'}));
    const rec = meses.map(()=>Math.round(2000+Math.random()*3500));
    const des = meses.map(()=>Math.round(800+Math.random()*2200));
    const rep = meses.map(()=>Math.round(300+Math.random()*1200));

    const receitas = rec.reduce((a,b)=>a+b,0);
    const despesas = des.reduce((a,b)=>a+b,0) + rep.reduce((a,b)=>a+b,0);
    return { meses, rec, des, rep, receitas, despesas };
  }

  // cria/atualiza gráficos
  let gLinha,gPizza,gBarras,gColunas;
  function render(){
    const { meses, rec, des, rep, receitas, despesas } = dadosMock();
    document.getElementById('kpi-receitas').textContent = fmtBR(receitas);
    document.getElementById('kpi-despesas').textContent = fmtBR(despesas);
    document.getElementById('kpi-saldo').textContent    = fmtBR(receitas-despesas);

    const ctxL = document.getElementById('chartLinha'), ctxP = document.getElementById('chartPizza'),
          ctxB = document.getElementById('chartBarras'), ctxC = document.getElementById('chartColunas');

    [gLinha,gPizza,gBarras,gColunas].forEach(g=>g && g.destroy());

    gLinha = new Chart(ctxL, {
      type:'line',
      data:{ labels:meses, datasets:[
        { label:'Receitas', data:rec },
        { label:'Despesas', data:des.map((v,i)=>v+rep[i]), },
      ]},
      options:{ responsive:true, plugins:{ legend:{ position:'bottom' } } }
    });

    gPizza = new Chart(ctxP, {
      type:'pie',
      data:{ labels:['Mensalidades','Produtos','Serviços'],
             datasets:[{ data:[55,25,20] }] },
      options:{ responsive:true, plugins:{ legend:{ position:'bottom' } } }
    });

    gBarras = new Chart(ctxB, {
      type:'bar',
      data:{ labels:meses, datasets:[{ label:'Receitas', data:rec }] },
      options:{ responsive:true, plugins:{ legend:{ position:'bottom' } } }
    });

    gColunas = new Chart(ctxC, {
      type:'bar',
      data:{ labels:meses, datasets:[
        { label:'Despesas', data:des },
        { label:'Repasses', data:rep }
      ]},
      options:{ responsive:true, plugins:{ legend:{ position:'bottom' } } }
    });
  }

  document.getElementById('btn-atualizar').addEventListener('click', render);
  document.getElementById('btn-pdf').addEventListener('click', () => {
    window.print(); // v1 simples; depois trocamos por jsPDF com imagens dos gráficos
  });

  // presets/intervalo (v1 ainda não filtra dados mock)
  const preset = document.getElementById('preset'), ini = document.getElementById('ini'), fim = document.getElementById('fim');
  function setPreset(){
    const v = preset.value;
    if(v==='custom'){ ini.disabled=false; fim.disabled=false; }
    else{
      ini.disabled=true; fim.disabled=true;
      const dias = Number(v)||365;
      const dFim = new Date(); const dIni = new Date(Date.now()-dias*86400000);
      ini.valueAsDate = dIni; fim.valueAsDate = dFim;
    }
  }
  preset.addEventListener('change', setPreset); setPreset();

  render();
  </script>
  <script src="https://unpkg.com/docx@7.7.0/build/index.js"></script>

  <script>
  // Gera DOCX com docx.js: inclui KPIs e os 4 gráficos como imagens
  async function canvasToArrayBuffer(canvas){
    const dataUrl = canvas.toDataURL('image/png');
    const res = await fetch(dataUrl);
    return await res.arrayBuffer();
  }
<script>
// ==== gerarDOCX: captura dados e canvases, monta o .docx ====
async function gerarDOCX(){
  try{
    // pega totais exibidos
    const totR = (document.getElementById('total-receitas')?.textContent||'').trim();
    const totD = (document.getElementById('total-despesas')?.textContent||'').trim();
    const totS = (document.getElementById('saldo-final')?.textContent||'').trim();

    // helper: converte dataURL (canvas.toDataURL) em ArrayBuffer
    async function dataURLtoArrayBuffer(dataURL){
      const res = await fetch(dataURL);
      const blob = await res.blob();
      return await blob.arrayBuffer();
    }

    // captura todos os canvases dos gráficos (ordem de exibição)
    const canvases = Array.from(document.querySelectorAll('canvas'));
    const chartBuffers = [];
    for (const cv of canvases){
      try{
        const url = cv.toDataURL('image/png');
        const ab  = await dataURLtoArrayBuffer(url);
        chartBuffers.push(ab);
      }catch(_){}
    }

    const D = window.docx;
    const doc = new D.Document({
      sections: [{
        properties: {},
        children: [
          // Título
          new D.Paragraph({
            alignment: D.AlignmentType.CENTER,
            children: [ new D.TextRun({text:"Relatórios Financeiros", bold:true, size:48}) ]
          }),
          new D.Paragraph({ text: "" }),

          // Resumo (tabela 2 colunas)
          new D.Paragraph({ children:[ new D.TextRun({text:"Resumo", bold:true, underline:{} , color:"2b579a", size:28}) ]}),
          new D.Table({
            width: { size: 100, type: D.WidthType.PERCENTAGE },
            rows: [
              new D.TableRow({
                children: [
                  new D.TableCell({children:[new D.Paragraph({children:[new D.TextRun({text:"Indicador", bold:true})]})]}),
                  new D.TableCell({children:[new D.Paragraph({children:[new D.TextRun({text:"Valor", bold:true})]})]}),
                ]
              }),
              new D.TableRow({
                children: [
                  new D.TableCell({children:[new D.Paragraph("Receitas")]}),
                  new D.TableCell({children:[new D.Paragraph(totR||"-")]}),
                ]
              }),
              new D.TableRow({
                children: [
                  new D.TableCell({children:[new D.Paragraph("Despesas")]}),
                  new D.TableCell({children:[new D.Paragraph(totD||"-")]}),
                ]
              }),
              new D.TableRow({
                children: [
                  new D.TableCell({children:[new D.Paragraph("Saldo")]}),
                  new D.TableCell({children:[new D.Paragraph(totS||"-")]}),
                ]
              })
            ]
          }),
          new D.Paragraph({ text: "" }),
          new D.Paragraph({ children:[ new D.TextRun({text:"Gráficos", bold:true, underline:{}, color:"2b579a", size:28}) ]}),
          new D.Paragraph({ text: "" }),
          // (as imagens dos charts entram depois)
        ]
      }]
    });

    // insere cada gráfico como imagem (uma por parágrafo)
    for (const ab of chartBuffers){
      try{
        const image = D.Media.addImage(doc, ab, 600, 320); // largura/altura aproximadas
        doc.Sections[0].children.push(new D.Paragraph(image));
        doc.Sections[0].children.push(new D.Paragraph({text:""}));
      }catch(_){}
    }

    const blob = await D.Packer.toBlob(doc);
    const a = document.createElement('a');
    a.download = 'relatorios_financeiros.docx';
    a.href = URL.createObjectURL(blob);
    document.body.appendChild(a);
    a.click();
    a.remove();
  }catch(err){
    console.error('DOCX error:', err);
    alert('Não foi possível gerar o DOCX. Veja o console (F12).');
  }
}

// liga o botão se existir
document.addEventListener('DOMContentLoaded', ()=>{
  const btn = document.getElementById('btn-docx') || document.querySelector('[data-action="gerar-docx"]');
  if(btn){
    btn.disabled = false;
    btn.addEventListener('click', gerarDOCX);
  }
});
// fim gerarDOCX
</script>
<script>
// KOKORO_DOCX_START
(function(){
  const qs  = s => document.querySelector(s);
  const qsa = s => Array.from(document.querySelectorAll(s));

  // aguarda libs carregarem
  function waitLibs(maxMs=6000){
    return new Promise((resolve, reject)=>{
      const t0 = Date.now();
      (function tick(){
        if (window.docx && window.saveAs) return resolve();
        if (Date.now()-t0 > maxMs) return reject(new Error('docx ou FileSaver não carregados'));
        setTimeout(tick, 120);
      })();
    });
  }

  function canvasesAlvo(){
    // pega todos os canvases visíveis
    const list = qsa('canvas').filter(c=>{
      const r = c.getBoundingClientRect();
      return r.width>0 && r.height>0;
    });
    console.log('[DOCX] canvases detectados:', list.map(c=>c.id||'(sem id)'));
    return list;
  }

  async function gerarDOCX(){
    try{
      await waitLibs();
      const { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType, Table, TableRow, TableCell, WidthType, Media } = docx;

      const children = [];
      children.push(new Paragraph({ text: 'Relatórios Financeiros', heading: HeadingLevel.TITLE, alignment: AlignmentType.CENTER }));
      children.push(new Paragraph({ text: 'Resumo', heading: HeadingLevel.HEADING_2 }));

      const totalRec  = (qs('#total-receitas')||{}).textContent || '';
      const totalDesp = (qs('#total-despesas')||{}).textContent || '';
      const saldo     = (qs('#saldo-final')||{}).textContent || '';

      children.push(new Paragraph(`Total de Receitas: ${totalRec}`));
      children.push(new Paragraph(`Total de Despesas: ${totalDesp}`));
      children.push(new Paragraph(`Saldo Final: ${saldo}`));
      children.push(new Paragraph(' '));

      children.push(new Table({
        width: { size: 100, type: WidthType.PERCENTAGE },
        rows: [
          new TableRow({ children: [
            new TableCell({ children:[ new Paragraph({children:[ new TextRun({text:'Indicador',bold:true}) ]}) ]}),
            new TableCell({ children:[ new Paragraph({children:[ new TextRun({text:'Valor',bold:true}) ]}) ]}),
          ]}),
          new TableRow({ children: [
            new TableCell({ children:[ new Paragraph('Receitas') ]}),
            new TableCell({ children:[ new Paragraph(totalRec) ]}),
          ]}),
          new TableRow({ children: [
            new TableCell({ children:[ new Paragraph('Despesas') ]}),
            new TableCell({ children:[ new Paragraph(totalDesp) ]}),
          ]}),
          new TableRow({ children: [
            new TableCell({ children:[ new Paragraph('Saldo') ]}),
            new TableCell({ children:[ new Paragraph(saldo) ]}),
          ]}),
        ]
      }));

      children.push(new Paragraph(' '));
      children.push(new Paragraph({ text: 'Gráficos', heading: HeadingLevel.HEADING_2 }));

      // adiciona cada canvas como imagem
      const cvs = canvasesAlvo();
      for (const cv of cvs){
        try{
          const title = cv.getAttribute('aria-label') || cv.id || 'Gráfico';
          const dataUrl = cv.toDataURL('image/png', 1.0);
          const base64 = dataUrl.split(',')[1];
          const bytes = Uint8Array.from(atob(base64), c=>c.charCodeAt(0));
          const img = Media.addImage(new Document({sections:[{children:[]}]}), bytes, 600, 320);
          // truque: Media.addImage precisa de um doc, então criamos um temporário
          children.push(new Paragraph({ text: title, heading: HeadingLevel.HEADING_3 }));
          children.push(new Paragraph(img));
          children.push(new Paragraph(' '));
        }catch(err){
          console.warn('[DOCX] Falha canvas -> imagem', cv.id, err);
        }
      }

      // cria o doc definitivo
      const doc = new Document({ sections: [{ children }] });
      const blob = await Packer.toBlob(doc);
      const nome = `Relatorio_Financeiro_${new Date().toISOString().slice(0,10)}.docx`;
      saveAs(blob, nome);
    }catch(err){
      console.error('[DOCX] Erro ao gerar:', err);
      alert('Não foi possível gerar o DOCX. Abra o console (F12) e me envie o erro mostrado.');
    }
  }

  // liga no botão por id ou data-attr
  function bindBtn(){
    const btn = document.getElementById('btn-docx') || document.querySelector('[data-action="gerar-docx"]');
    if (!btn) { console.warn('[DOCX] Botão não encontrado'); return; }
    btn.disabled = false;
    btn.addEventListener('click', gerarDOCX);
    console.log('[DOCX] Botão conectado');
  }

  if (document.readyState === 'loading'){
    document.addEventListener('DOMContentLoaded', bindBtn);
  } else {
    bindBtn();
  }
})();
 // KOKORO_DOCX_END
</script>
