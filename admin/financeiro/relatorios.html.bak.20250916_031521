<!DOCTYPE html>
<html lang="pt-br">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>KOKORO 心 - Relatórios Financeiros</title>
  <link rel="stylesheet" href="/admin/css/linkbtn.css">
  <link rel="stylesheet" href="/admin/css/btns.css">
  <style>
    :root { --cor-fundo:#121212; --cor-container:#1a1a1a; --cor-borda:#333;
            --cor-texto-principal:#f0f0f0; --cor-azul:#3498db; }
    body{margin:0;background:var(--cor-fundo);color:var(--cor-texto-principal);font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Arial}
    .container{max-width:1600px;margin:0 auto;padding:24px}
    .topbar{display:flex;gap:12px;justify-content:flex-end;padding:10px 16px}
    .btn{border:1px solid #334155;border-radius:.6rem;background:#111827;color:#bfdbfe;text-decoration:none;padding:.55rem .9rem}
    .btn:hover{border-color:#3b82f6;color:#dbeafe}
    h1{color:var(--cor-azul);text-align:center;margin:8px 0 20px}
    .grid{display:grid;gap:16px;grid-template-columns:repeat(auto-fit,minmax(260px,1fr))}
    .card{background:linear-gradient(180deg,#1a1a1a,#171717);border:1px solid var(--cor-borda);border-radius:12px;padding:16px}
    .kpis{display:grid;gap:12px;grid-template-columns:repeat(3,1fr);margin:16px 0}
    .kpi{background:#181818;border:1px solid #2a2a2a;border-radius:10px;padding:14px;text-align:center}
    .kpi h3{margin:2px 0 6px;font-size:.95rem;opacity:.8}
    .kpi p{margin:0;font-weight:800;font-size:1.5rem}
    .toolbar{display:flex;flex-wrap:wrap;gap:8px;align-items:center;margin:8px 0 16px}
    .toolbar input,.toolbar select,.toolbar button{background:#2a2a2a;color:#fff;border:1px solid #3a3a3a;border-radius:8px;padding:10px}
    canvas{width:100%;height:320px;max-height:420px}
    .muted{opacity:.75;font-size:.9rem}
  </style>
  <script src="https://cdn.jsdelivr.net/npm/docx@8.5.0/build/index.umd.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/file-saver@2.0.5/dist/FileSaver.min.js"></script>
</head>
<body>
  <nav class="topbar">
    <a class="btn" href="/admin/financeiro/financeiro.html">← Voltar ao Financeiro</a>
    <a class="btn" href="/admin/index.html">Admin</a>
  </nav>
  <div class="container">
    <h1>Relatórios Financeiros</h1>

    <div class="toolbar">
      <select id="preset">
        <option value="30">Últimos 30 dias</option>
        <option value="90">Últimos 90 dias</option>
        <option value="365" selected>Últimos 12 meses</option>
        <option value="custom">Personalizado…</option>
      </select>
      <input type="date" id="ini" />
      <input type="date" id="fim" />
      <button id="btn-atualizar">Atualizar</button>
      <button id="btn-pdf">Gerar PDF</button>
      <button id="btn-docx">Gerar DOCX</button>
    </div>

    <div class="kpis">
      <div class="kpi"><h3>Receitas</h3><p id="kpi-receitas">R$ 0,00</p></div>
      <div class="kpi"><h3>Despesas + Repasses</h3><p id="kpi-despesas">R$ 0,00</p></div>
      <div class="kpi"><h3>Saldo</h3><p id="kpi-saldo">R$ 0,00</p></div>
    </div>

    <div class="grid">
      <div class="card"><h3>Receitas vs Despesas (Linha)</h3><canvas id="chartLinha"></canvas></div>
      <div class="card"><h3>Composição de Receita (Pizza)</h3><canvas id="chartPizza"></canvas></div>
      <div class="card"><h3>Receitas por Mês (Barras)</h3><canvas id="chartBarras"></canvas></div>
      <div class="card"><h3>Despesas & Repasses por Mês (Colunas)</h3><canvas id="chartColunas"></canvas></div>
    </div>

    <p class="muted">v1: esta tela já está online. Na próxima etapa, conectaremos estes gráficos diretamente às APIs /api/financeiro para dados 100% do backend.</p>
  </div>

  <!-- Chart.js CDN (leve) -->
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script>
  const fmtBR = n => (Number(n)||0).toLocaleString('pt-BR',{style:'currency',currency:'BRL'});

  // v1: dados de amostra locais (substituiremos por fetch às APIs)
  function dadosMock(){
    const meses = Array.from({length:12},(_,i)=>new Date(new Date().getFullYear(), new Date().getMonth()-11+i, 1))
      .map(d=>d.toLocaleDateString('pt-BR',{month:'short'}));
    const rec = meses.map(()=>Math.round(2000+Math.random()*3500));
    const des = meses.map(()=>Math.round(800+Math.random()*2200));
    const rep = meses.map(()=>Math.round(300+Math.random()*1200));

    const receitas = rec.reduce((a,b)=>a+b,0);
    const despesas = des.reduce((a,b)=>a+b,0) + rep.reduce((a,b)=>a+b,0);
    return { meses, rec, des, rep, receitas, despesas };
  }

  // cria/atualiza gráficos
  let gLinha,gPizza,gBarras,gColunas;
  function render(){
    const { meses, rec, des, rep, receitas, despesas } = dadosMock();
    document.getElementById('kpi-receitas').textContent = fmtBR(receitas);
    document.getElementById('kpi-despesas').textContent = fmtBR(despesas);
    document.getElementById('kpi-saldo').textContent    = fmtBR(receitas-despesas);

    const ctxL = document.getElementById('chartLinha'), ctxP = document.getElementById('chartPizza'),
          ctxB = document.getElementById('chartBarras'), ctxC = document.getElementById('chartColunas');

    [gLinha,gPizza,gBarras,gColunas].forEach(g=>g && g.destroy());

    gLinha = new Chart(ctxL, {
      type:'line',
      data:{ labels:meses, datasets:[
        { label:'Receitas', data:rec },
        { label:'Despesas', data:des.map((v,i)=>v+rep[i]), },
      ]},
      options:{ responsive:true, plugins:{ legend:{ position:'bottom' } } }
    });

    gPizza = new Chart(ctxP, {
      type:'pie',
      data:{ labels:['Mensalidades','Produtos','Serviços'],
             datasets:[{ data:[55,25,20] }] },
      options:{ responsive:true, plugins:{ legend:{ position:'bottom' } } }
    });

    gBarras = new Chart(ctxB, {
      type:'bar',
      data:{ labels:meses, datasets:[{ label:'Receitas', data:rec }] },
      options:{ responsive:true, plugins:{ legend:{ position:'bottom' } } }
    });

    gColunas = new Chart(ctxC, {
      type:'bar',
      data:{ labels:meses, datasets:[
        { label:'Despesas', data:des },
        { label:'Repasses', data:rep }
      ]},
      options:{ responsive:true, plugins:{ legend:{ position:'bottom' } } }
    });
  }

  document.getElementById('btn-atualizar').addEventListener('click', render);
  document.getElementById('btn-pdf').addEventListener('click', () => {
    window.print(); // v1 simples; depois trocamos por jsPDF com imagens dos gráficos
  });

  // presets/intervalo (v1 ainda não filtra dados mock)
  const preset = document.getElementById('preset'), ini = document.getElementById('ini'), fim = document.getElementById('fim');
  function setPreset(){
    const v = preset.value;
    if(v==='custom'){ ini.disabled=false; fim.disabled=false; }
    else{
      ini.disabled=true; fim.disabled=true;
      const dias = Number(v)||365;
      const dFim = new Date(); const dIni = new Date(Date.now()-dias*86400000);
      ini.valueAsDate = dIni; fim.valueAsDate = dFim;
    }
  }
  preset.addEventListener('change', setPreset); setPreset();

  render();
  </script>
  <script src="https://unpkg.com/docx@7.7.0/build/index.js"></script>

  <script>
  // Gera DOCX com docx.js: inclui KPIs e os 4 gráficos como imagens
  async function canvasToArrayBuffer(canvas){
    const dataUrl = canvas.toDataURL('image/png');
    const res = await fetch(dataUrl);
    return await res.arrayBuffer();
  }
<script>
// ==== gerarDOCX: captura dados e canvases, monta o .docx ====
async async     // 1) pega imagens dos gráficos ANTES de criar o doc
    const canvases = Array.from(document.querySelectorAll('canvas'));
    const images = [];
    for (const cv of canvases){
      try{
        const url = cv.toDataURL('image/png');
        const ab  = await dataURLtoArrayBuffer(url);
        images.push(ab);
      }catch(e){ console.warn('canvas -> dataURL falhou', e); }
    }

    // 2) monta todos os children primeiro
    const children = [
      new D.Paragraph({ alignment: D.AlignmentType.CENTER, children:[ new D.TextRun({text:"Relatórios Financeiros", bold:true, size:48}) ]}),
      new D.Paragraph({ text: "" }),
      new D.Paragraph({ children:[ new D.TextRun({text:"Resumo", bold:true, underline:{}, color:"2b579a", size:28}) ]}),
      new D.Table({
        width:{ size:100, type:D.WidthType.PERCENTAGE },
        rows:[
          new D.TableRow({ children:[
            new D.TableCell({children:[new D.Paragraph({children:[new D.TextRun({text:"Indicador", bold:true})]})]}),
            new D.TableCell({children:[new D.Paragraph({children:[new D.TextRun({text:"Valor", bold:true})]})]}),
          ]}),
          new D.TableRow({ children:[
            new D.TableCell({children:[new D.Paragraph("Receitas")]}),
            new D.TableCell({children:[new D.Paragraph(totR||"-")]}),
          ]}),
          new D.TableRow({ children:[
            new D.TableCell({children:[new D.Paragraph("Despesas")]}),
            new D.TableCell({children:[new D.Paragraph(totD||"-")]}),
          ]}),
          new D.TableRow({ children:[
            new D.TableCell({children:[new D.Paragraph("Saldo")]}),
            new D.TableCell({children:[new D.Paragraph(totS||"-")]}),
          ]})
        ]
      }),
      new D.Paragraph({ text: "" }),
      new D.Paragraph({ children:[ new D.TextRun({text:"Gráficos", bold:true, underline:{}, color:"2b579a", size:28}) ]}),
      new D.Paragraph({ text: "" }),
    ];

    for (const ab of images){
      try{
        const img = D.Media.addImage({} /* compat */, ab, 600, 320);
        // truque: cria o ImageRun diretamente (API do UMD aceita)
        children.push(new D.Paragraph(img));
        children.push(new D.Paragraph({text:""}));
      }catch(e){ console.warn('addImage falhou', e); }
    }

    // 3) cria o documento só agora
    const doc = new D.Document({ sections:[{ properties:{}, children }] });

    const blob = await D.Packer.toBlob(doc);
    const a = document.createElement('a');
    a.download = 'relatorios_financeiros.docx';
    a.href = URL.createObjectURL(blob);
    document.body.appendChild(a);
    a.click();
    a.remove();
  }catch(err){
    console.error('DOCX error (minifix):', err);
    alert('Não foi possível gerar o DOCX. Veja o console (F12).');
  }
}


// liga o botão se existir
document.addEventListener('DOMContentLoaded', ()=>{
  const btn = document.getElementById('btn-docx') || document.querySelector('[data-action="gerar-docx"]');
  if(btn){
    btn.disabled = false;
    btn.addEventListener('click', gerarDOCX);
  }
});
// fim gerarDOCX
</script>
<script>
// KOKORO_DOCX_START
(function(){
  const qs  = s => document.querySelector(s);
  const qsa = s => Array.from(document.querySelectorAll(s));

  // aguarda libs carregarem
  function waitLibs(maxMs=6000){
    return new Promise((resolve, reject)=>{
      const t0 = Date.now();
      (function tick(){
        if (window.docx && window.saveAs) return resolve();
        if (Date.now()-t0 > maxMs) return reject(new Error('docx ou FileSaver não carregados'));
        setTimeout(tick, 120);
      })();
    });
  }

  function canvasesAlvo(){
    // pega todos os canvases visíveis
    const list = qsa('canvas').filter(c=>{
      const r = c.getBoundingClientRect();
      return r.width>0 && r.height>0;
    });
    console.log('[DOCX] canvases detectados:', list.map(c=>c.id||'(sem id)'));
    return list;
  }

  async function gerarDOCX(){
    try{
      await waitLibs();
      const { Document, Packer, Paragraph, TextRun, HeadingLevel, AlignmentType, Table, TableRow, TableCell, WidthType, Media } = docx;

      const children = [];
      children.push(new Paragraph({ text: 'Relatórios Financeiros', heading: HeadingLevel.TITLE, alignment: AlignmentType.CENTER }));
      children.push(new Paragraph({ text: 'Resumo', heading: HeadingLevel.HEADING_2 }));

      const totalRec  = (qs('#total-receitas')||{}).textContent || '';
      const totalDesp = (qs('#total-despesas')||{}).textContent || '';
      const saldo     = (qs('#saldo-final')||{}).textContent || '';

      children.push(new Paragraph(`Total de Receitas: ${totalRec}`));
      children.push(new Paragraph(`Total de Despesas: ${totalDesp}`));
      children.push(new Paragraph(`Saldo Final: ${saldo}`));
      children.push(new Paragraph(' '));

      children.push(new Table({
        width: { size: 100, type: WidthType.PERCENTAGE },
        rows: [
          new TableRow({ children: [
            new TableCell({ children:[ new Paragraph({children:[ new TextRun({text:'Indicador',bold:true}) ]}) ]}),
            new TableCell({ children:[ new Paragraph({children:[ new TextRun({text:'Valor',bold:true}) ]}) ]}),
          ]}),
          new TableRow({ children: [
            new TableCell({ children:[ new Paragraph('Receitas') ]}),
            new TableCell({ children:[ new Paragraph(totalRec) ]}),
          ]}),
          new TableRow({ children: [
            new TableCell({ children:[ new Paragraph('Despesas') ]}),
            new TableCell({ children:[ new Paragraph(totalDesp) ]}),
          ]}),
          new TableRow({ children: [
            new TableCell({ children:[ new Paragraph('Saldo') ]}),
            new TableCell({ children:[ new Paragraph(saldo) ]}),
          ]}),
        ]
      }));

      children.push(new Paragraph(' '));
      children.push(new Paragraph({ text: 'Gráficos', heading: HeadingLevel.HEADING_2 }));

      // adiciona cada canvas como imagem
      const cvs = canvasesAlvo();
      for (const cv of cvs){
        try{
          const title = cv.getAttribute('aria-label') || cv.id || 'Gráfico';
          const dataUrl = cv.toDataURL('image/png', 1.0);
          const base64 = dataUrl.split(',')[1];
          const bytes = Uint8Array.from(atob(base64), c=>c.charCodeAt(0));
          const img = Media.addImage(new Document({sections:[{children:[]}]}), bytes, 600, 320);
          // truque: Media.addImage precisa de um doc, então criamos um temporário
          children.push(new Paragraph({ text: title, heading: HeadingLevel.HEADING_3 }));
          children.push(new Paragraph(img));
          children.push(new Paragraph(' '));
        }catch(err){
          console.warn('[DOCX] Falha canvas -> imagem', cv.id, err);
        }
      }

      // cria o doc definitivo
      const doc = new Document({ sections: [{ children }] });
      const blob = await Packer.toBlob(doc);
      const nome = `Relatorio_Financeiro_${new Date().toISOString().slice(0,10)}.docx`;
      saveAs(blob, nome);
    }catch(err){
      console.error('[DOCX] Erro ao gerar:', err);
      alert('Não foi possível gerar o DOCX. Abra o console (F12) e me envie o erro mostrado.');
    }
  }

  // liga no botão por id ou data-attr
  function bindBtn(){
    const btn = document.getElementById('btn-docx') || document.querySelector('[data-action="gerar-docx"]');
    if (!btn) { console.warn('[DOCX] Botão não encontrado'); return; }
    btn.disabled = false;
    btn.addEventListener('click', gerarDOCX);
    console.log('[DOCX] Botão conectado');
  }

  if (document.readyState === 'loading'){
    document.addEventListener('DOMContentLoaded', bindBtn);
  } else {
    bindBtn();
  }
})();
 // KOKORO_DOCX_END
</script>


<!-- === KOKORO: Painel de Cores dos Gráficos === -->
<style>
  .kkr-color-panel{margin:16px 0;padding:12px;border:1px solid #334155;border-radius:10px;background:#0b1220;}
  .kkr-color-panel h3{margin:0 0 10px;font-size:16px;color:#93c5fd}
  .kkr-row{display:flex;flex-wrap:wrap;gap:10px;align-items:center}
  .kkr-color-item{display:flex;flex-direction:column;gap:6px;align-items:center}
  .kkr-color-item label{font-size:12px;color:#a3b3c7}
  .kkr-color-item input[type="color"]{width:44px;height:34px;border:0;background:transparent;padding:0}
  .kkr-btn{border:1px solid #3b82f6;background:#1e293b;color:#e5f0ff;border-radius:8px;padding:8px 10px;cursor:pointer}
  .kkr-btn:active{transform:translateY(1px)}
  .kkr-preset{display:flex;gap:8px;flex-wrap:wrap}
  .kkr-note{font-size:12px;color:#8fa6c1;margin-top:8px}
</style>
<div class="kkr-color-panel" id="kkr-color-panel" style="display:none">
  <h3>🎨 Cores dos Gráficos</h3>
  <div class="kkr-row" id="kkr-color-pickers"></div>
  <div style="height:8px"></div>
  <div class="kkr-row">
    <div class="kkr-preset">
      <button type="button" class="kkr-btn" data-preset="default">Preset: Padrão</button>
      <button type="button" class="kkr-btn" data-preset="warm">Preset: Quente</button>
      <button type="button" class="kkr-btn" data-preset="cool">Preset: Frio</button>
      <button type="button" class="kkr-btn" data-preset="mono">Preset: Monocromático</button>
    </div>
    <div style="flex:1"></div>
    <button type="button" class="kkr-btn" id="kkr-save">Salvar</button>
    <button type="button" class="kkr-btn" id="kkr-reset">Resetar cores</button>
  </div>
  <div class="kkr-note">Dica: as cores são salvas no seu navegador e aplicadas a todos os gráficos desta página.</div>
</div>

<script>
(function(){
  // Só monta o painel quando Chart.js estiver presente
  function whenChartReady(cb){
    if (window.Chart) return cb();
    let tries = 0;
    const iv = setInterval(()=>{
      tries++;
      if (window.Chart){ clearInterval(iv); cb(); }
      if (tries > 50) clearInterval(iv); // ~5s
    }, 100);
  }

  const STORAGE_KEY = 'kokoro_chart_palette_v1';
  const DEFAULT = ['#3b82f6','#10b981','#f59e0b','#ef4444','#8b5cf6','#22d3ee'];
  const PRESETS = {
    default: DEFAULT,
    warm:    ['#ef4444','#f97316','#f59e0b','#eab308','#fb7185','#fca5a5'],
    cool:    ['#3b82f6','#22d3ee','#06b6d4','#14b8a6','#10b981','#84cc16'],
    mono:    ['#3b82f6','#2f6ad1','#2451a8','#1a3b85','#10275f','#0b1b42']
  };

  function loadPalette(){
    try{
      const raw = localStorage.getItem(STORAGE_KEY);
      const arr = JSON.parse(raw);
      if (Array.isArray(arr) && arr.length) return arr;
    }catch(e){}
    return DEFAULT.slice();
  }
  function savePalette(arr){
    localStorage.setItem(STORAGE_KEY, JSON.stringify(arr));
  }

  function applyPaletteToCharts(palette){
    if (!window.Chart) return;
    // Chart.js 3/4: instances pode ser Map/objeto. Tentamos cobrir ambos.
    let instances = [];
    try {
      if (Chart.instances) {
        instances = Array.isArray(Chart.instances) ? Chart.instances
                  : Array.from(Object.values(Chart.instances));
      } else if (Chart.registry && Chart.registry._instances) {
        instances = Array.from(Chart.registry._instances.items || []);
      }
    } catch(e){}
    // Fallback: procurar gráficos conhecidos via canvases com _chart
    document.querySelectorAll('canvas').forEach(cv=>{
      if (cv && cv._chart && instances.indexOf(cv._chart)===-1) instances.push(cv._chart);
    });

    instances.forEach(ch=>{
      if (!ch || !ch.config) return;
      const type = ch.config.type || '';
      const dsArr = (ch.config.data && ch.config.data.datasets) ? ch.config.data.datasets : [];

      dsArr.forEach((ds, idx)=>{
        const color = palette[idx % palette.length];
        if (type==='pie' || type==='doughnut' || type==='polarArea') {
          // série única com várias fatias -> vetor de cores
          const n = (ch.config.data.labels||[]).length || 0;
          const arr = Array.from({length:n}).map((_,i)=> palette[i % palette.length]);
          ds.backgroundColor = arr;
          ds.borderColor = arr;
        } else {
          // linhas / barras
          ds.borderColor = color;
          ds.backgroundColor = (type==='line')
            ? color + '33' // 20% alpha (hex)
            : color;
          if (ds.pointBackgroundColor !== undefined) ds.pointBackgroundColor = color;
          if (ds.pointBorderColor !== undefined) ds.pointBorderColor = color;
        }
      });

      try{ ch.update(); }catch(e){}
    });
  }

  function buildPanel(){
    const panel = document.getElementById('kkr-color-panel');
    if (!panel) return;
    panel.style.display = '';

    const pickers = document.getElementById('kkr-color-pickers');
    pickers.innerHTML = '';
    const pal = loadPalette();
    const inputs = [];

    for (let i=0;i<6;i++){
      const wrap = document.createElement('div');
      wrap.className = 'kkr-color-item';
      const label = document.createElement('label');
      label.textContent = 'Cor '+(i+1);
      const inp = document.createElement('input');
      inp.type = 'color';
      inp.value = pal[i] || DEFAULT[i];
      wrap.appendChild(label);
      wrap.appendChild(inp);
      pickers.appendChild(wrap);
      inputs.push(inp);
    }

    // presets
    panel.querySelectorAll('button[data-preset]').forEach(btn=>{
      btn.addEventListener('click', ()=>{
        const key = btn.getAttribute('data-preset');
        const arr = PRESETS[key] || DEFAULT;
        inputs.forEach((inp, i)=> inp.value = arr[i] || DEFAULT[i]);
      });
    });

    // salvar
    document.getElementById('kkr-save').addEventListener('click', ()=>{
      const arr = inputs.map(i=>i.value);
      savePalette(arr);
      applyPaletteToCharts(arr);
    });

    // reset
    document.getElementById('kkr-reset').addEventListener('click', ()=>{
      inputs.forEach((inp,i)=> inp.value = DEFAULT[i]);
      savePalette(DEFAULT.slice());
      applyPaletteToCharts(DEFAULT.slice());
    });

    // aplica ao carregar
    applyPaletteToCharts(pal);
  }

  // Insere o painel acima do primeiro <h1> encontrado
  function injectPanel(){
    const container = document.body || document.documentElement;
    const h1 = document.querySelector('h1, .page-title, .title');
    if (h1 && h1.parentElement) {
      h1.insertAdjacentHTML('afterend', document.getElementById('kkr-color-panel') ? '' : document.currentScript.previousElementSibling.outerHTML);
    }
  }

  // Monta painel quando Chart estiver pronto
  whenChartReady(()=> {
    buildPanel();
  });

})();
</script>
