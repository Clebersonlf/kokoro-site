<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Kokoro - Portal de Artes Marciais" />
    <title>Kokoro</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&family=Open+Sans:wght@400;600&display=swap" rel="stylesheet" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css" />
    <link rel="stylesheet" href="/css/style.css" />
    <!-- SCRIPT DO HCAPTCHA -->
    <script src="https://js.hcaptcha.com/1/api.js?onload=initCaptcha&render=explicit" async defer></script>
    <style>
        /* Estilos gerais que você já tinha */
        .auth-container{position:relative; z-index:20; display:flex; gap:8px; justify-content:flex-end; padding:8px}
        .auth-btn{background:transparent;border:1px solid #555;color:#ddd;border-radius:10px;padding:8px 12px;cursor:pointer}
        #btnLogout{display:none}
        #sessionName{margin-right:8px;color:#9ad1ff;font-size:14px}
        .modal{display:none;position:fixed;inset:0;z-index:1000;background:rgba(0,0,0,.6);align-items:center;justify-content:center}
        .modal .modal-content{width:min(560px,92vw);background:#171717;color:#eee;border:1px solid #333;border-radius:14px;box-shadow:0 24px 64px rgba(0,0,0,.55);padding:18px}
        .modal .modal-content h2{margin:0 0 10px;color:#8ecbff}
        .modal .close{float:right;cursor:pointer;font-size:22px;color:#bbb}
        .form-group{display:flex;flex-direction:column;gap:6px;margin:8px 0}
        .form-group input{background:#232323;border:1px solid #3a3a3a;border-radius:10px;padding:11px 12px;color:#f5f5f5}
        .submit-btn{background:#3498db;border:none;color:#fff;border-radius:10px;padding:10px 14px;font-weight:600;cursor:pointer}
        .submit-btn[disabled]{opacity:.6; cursor:not-allowed}
        .auth-error{display:none;background:#3b1d1d;color:#ffb3b3;border:1px solid #6c2f2f;padding:8px 10px;border-radius:8px;margin-bottom:10px}
        .password-wrapper{position:relative; display:flex; align-items:center}
        .password-wrapper input{width:100%; padding-right:44px}
        .password-toggle{position:absolute; right:8px; top:50%; transform:translateY(-50%); background:transparent; border:0; cursor:pointer; padding:6px; color:#bbb}
        .password-toggle:focus{outline:2px solid #3498db; outline-offset:2px}
        .strength-wrap{display:flex; flex-direction:column; gap:6px; margin-top:6px}
        .strength-bar{height:8px; border-radius:999px; background:#2a2a2a; overflow:hidden}
        .strength-bar > span{display:block; height:100%; width:0%; background:#ff5858; transition:width .25s ease}
        .strength-hint{font-size:12px; color:#bbb}
        .req-list{display:grid; grid-template-columns:1fr 1fr; gap:6px; font-size:12px; color:#bbb; margin-top:4px}
        .req-item{display:flex; align-items:center; gap:6px}
        .req-item i{font-size:12px}
        .ok{color:#74ff9f}
        .no{color:#ff9f9f}
        .center-content{display:flex; flex-direction:column; align-items:center; gap:12px;}
        #motivacional.motivacional-box{position: relative; display: inline-block; max-width: 260px; padding: 10px 14px; font-size: 14px; line-height: 1.35; text-align: center; background: rgba(66, 59, 59, 0.75); border: 1px solid #333; border-radius: 10px; margin: 8px auto 0;}
        #motivacional .japanese-text{ font-size: 18px; }
        #motivacional .quote-translation{ font-size: 12px; color:#d9d9d9; }
        #motivacional .close-button{position: absolute; top: 6px; right: 8px; font-size: 18px; color: #ccc; background: transparent; border: 0; cursor: pointer;}
    </style>
</head>
<body>
<div class="container">
    <!-- Auth topo direito -->
    <div class="auth-container">
        <span id="sessionName" aria-live="polite"></span>
        <button id="loginBtn" class="auth-btn" aria-label="Login">Login</button>
        <button id="registerBtn" class="auth-btn" aria-label="Cadastrar-se">Cadastre-se</button>
        <button id="btnLogout" class="auth-btn" aria-label="Sair">Sair</button>
    </div>
</div>

<!-- Conteúdo principal -->
<div class="center-content">
    <h1>KOKORO</h1>
    <div class="kanji" role="img" aria-label="Kanji Kokoro - Coração/Mente">心</div>

    <!-- Caixa motivacional -->
    <div class="motivacional-box" id="motivacional">
        <button class="close-button" id="motivacionalClose" aria-label="Fechar mensagem motivacional">×</button>
        <p>
            <span lang="ja" class="japanese-text">七転び八起き</span><br />
            <span class="quote-translation">"Caia sete vezes, levante-se oito"</span>
        </p>
    </div>
</div>

<!-- Recursos -->
<section class="features-section">
    <div class="feature-card"><h3>Treine com os Melhores</h3><p>Instrutores certificados e metodologia exclusiva</p></div>
    <div class="feature-card"><h3>Conteúdo Exclusivo</h3><p>Acesso a vídeos, apostilas e material didático</p></div>
    <div class="feature-card"><h3>Mentoria</h3><p>Mentorias presenciais ou virtuais com profissionais experientes.</p></div>
</section>

<!-- Redes Sociais -->
<div class="social-media">
    <a href="https://instagram.com/seu_perfil" target="_blank" class="social-icon" aria-label="Siga-nos no Instagram"><i class="fab fa-instagram"></i></a>
    <a href="https://facebook.com/sua_pagina" target="_blank" class="social-icon" aria-label="Curta nossa página no Facebook"><i class="fab fa-facebook"></i></a>
    <a href="https://youtube.com/seu_canal" target="_blank" class="social-icon" aria-label="Inscreva-se no YouTube"><i class="fab fa-youtube"></i></a>
    <a href="https://wa.me/seu_numero" target="_blank" class="social-icon" aria-label="Contate-nos pelo WhatsApp"><i class="fab fa-whatsapp"></i></a>
</div>

<!-- Modal de Login -->
<div id="loginModal" class="modal" role="dialog" aria-labelledby="loginTitle" aria-modal="true">
    <div class="modal-content">
        <span class="close" data-close="loginModal" aria-label="Fechar modal">&times;</span>
        <h2 id="loginTitle">Login</h2>
        <div id="loginError" class="auth-error"></div>
        <form id="loginForm" action="#" method="post" autocomplete="on">
            <div class="form-group">
                <label for="email">Email:</label>
                <input type="email" id="email" name="email" placeholder="Seu email" required />
            </div>
            <div class="form-group">
                <label for="password">Senha:</label>
                <div class="password-wrapper">
                    <input type="password" id="password" name="password" placeholder="Sua senha" required />
                    <button type="button" class="password-toggle" aria-label="Mostrar senha" data-target="password">
                        <i class="fa-solid fa-eye"></i>
                    </button>
                </div>
            </div>
            <button type="submit" class="submit-btn">Entrar</button>
        </form>
    </div>
</div>

<!-- Modal de Cadastro com hCaptcha -->
<div id="registerModal" class="modal" role="dialog" aria-labelledby="registerTitle" aria-modal="true">
    <div class="modal-content">
        <span class="close" data-close="registerModal" aria-label="Fechar modal">&times;</span>
        <h2 id="registerTitle">Cadastro</h2>
        <div id="registerError" class="auth-error"></div>
        <form id="registerForm" action="#" method="post" autocomplete="on">
            <div class="form-group">
                <label for="newName">Nome completo (opcional)</label>
                <input type="text" id="newName" name="newName" placeholder="Seu nome" />
            </div>
            <div class="form-group">
                <label for="newEmail">Email:</label>
                <input type="email" id="newEmail" name="newEmail" placeholder="Seu email" required />
            </div>
            <div class="form-group">
                <label for="newPassword">Senha:</label>
                <div class="password-wrapper">
                    <input type="password" id="newPassword" name="newPassword" placeholder="Sua senha" minlength="8" required />
                    <button type="button" class="password-toggle" aria-label="Mostrar senha" data-target="newPassword">
                        <i class="fa-solid fa-eye"></i>
                    </button>
                </div>
                <!-- Medidor de força + requisitos -->
                <div class="strength-wrap" id="pwStrengthWrap">
                    <div class="strength-bar"><span id="pwBar"></span></div>
                    <div class="strength-hint" id="pwHint">Força da senha</div>
                    <div class="req-list">
                        <div class="req-item" id="reqLen"><i class="fa-solid fa-circle-xmark no"></i>Mínimo 8 caracteres</div>
                        <div class="req-item" id="reqUpper"><i class="fa-solid fa-circle-xmark no"></i>Letra maiúscula</div>
                        <div class="req-item" id="reqLower"><i class="fa-solid fa-circle-xmark no"></i>Letra minúscula</div>
                        <div class="req-item" id="reqDigit"><i class="fa-solid fa-circle-xmark no"></i>Número</div>
                        <div class="req-item" id="reqSpecial"><i class="fa-solid fa-circle-xmark no"></i>Caractere especial (!@#$...)</div>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label for="newPassword2">Confirmar senha:</label>
                <div class="password-wrapper">
                    <input type="password" id="newPassword2" name="newPassword2" placeholder="Repita a senha" minlength="8" required />
                    <button type="button" class="password-toggle" aria-label="Mostrar senha" data-target="newPassword2">
                        <i class="fa-solid fa-eye"></i>
                    </button>
                </div>
            </div>

            <!-- WIDGET DO HCAPTCHA -->
            <div class="form-group">
                <!-- ATENÇÃO AQUI: Substitua 'SUA_SITE_KEY_AQUI' pela sua chave real do hCaptcha -->
                <div id="captchaContainer" class="h-captcha"
                     data-sitekey="SUA_SITE_KEY_AQUI"
                     data-callback="onCaptchaSuccess"
                     data-expired-callback="onCaptchaExpired"
                     data-error-callback="onCaptchaError">
                </div>
            </div>

            <button type="submit" id="registerSubmit" class="submit-btn" disabled>Cadastrar</button>
        </form>
    </div>
</div>

<!-- Navegação principal -->
<nav class="menu" role="navigation">
    <ul><!-- Links serão adicionados aqui quando necessário --></ul>
</nav>
</div>

<!-- SCRIPT UNIFICADO E CORRIGIDO COM HCAPTCHA -->
<script>
    // ======================================================
    // Funções Globais para o hCaptcha (precisam estar fora do DOMContentLoaded)
    // ======================================================
    let isCaptchaVerified = false;

    function onCaptchaSuccess() {
        console.log('hCaptcha verificado com sucesso!');
        isCaptchaVerified = true;
        // Dispara um evento para que o script principal saiba da mudança
        document.dispatchEvent(new Event('captchaStateChange'));
    }

    function onCaptchaExpired() {
        console.log('hCaptcha expirou.');
        isCaptchaVerified = false;
        document.dispatchEvent(new Event('captchaStateChange'));
    }

    function onCaptchaError(error) {
        console.error('Erro no hCaptcha:', error);
        isCaptchaVerified = false;
        document.dispatchEvent(new Event('captchaStateChange'));
    }


    // ======================================================
    // Lógica Principal da Página
    // ======================================================
    document.addEventListener('DOMContentLoaded', () => {

        // ======= Rotas e Chaves =======
        const CADASTRO_PAGE = 'cadastro.html';
        const USERS_KEY = 'kokoro_users';
        const SESSION_KEY = 'kokoro_session';

        // ======= Elementos da UI =======
        const loginBtn = document.getElementById('loginBtn');
        const registerBtn = document.getElementById('registerBtn');
        const logoutBtn = document.getElementById('btnLogout');
        const sessionNameEl = document.getElementById('sessionName');

        const loginModal = document.getElementById('loginModal');
        const registerModal = document.getElementById('registerModal');
        const loginForm = document.getElementById('loginForm');
        const registerForm = document.getElementById('registerForm');
        const loginError = document.getElementById('loginError');
        const registerError = document.getElementById('registerError');
        const registerSubmit = document.getElementById('registerSubmit');

        const pwInput = document.getElementById('newPassword');
        const pwConfirm = document.getElementById('newPassword2');
        const pwBar = document.getElementById('pwBar');
        const pwHint = document.getElementById('pwHint');
        const reqLen = document.getElementById('reqLen');
        const reqUpper = document.getElementById('reqUpper');
        const reqLower = document.getElementById('reqLower');
        const reqDigit = document.getElementById('reqDigit');
        const reqSpecial = document.getElementById('reqSpecial');

        const motivacionalBox = document.getElementById('motivacional');
        const motivacionalCloseBtn = document.getElementById('motivacionalClose');

        // ======= Funções de Storage =======
        const loadUsers = () => JSON.parse(localStorage.getItem(USERS_KEY) || '[]');
        const saveUsers = (arr) => localStorage.setItem(USERS_KEY, JSON.stringify(arr));
        const setSession = (obj) => localStorage.setItem(SESSION_KEY, JSON.stringify(obj));
        const getSession = () => { try { return JSON.parse(localStorage.getItem(SESSION_KEY) || 'null'); } catch { return null; } };
        const clearSession = () => localStorage.removeItem(SESSION_KEY);

        // ======= Lógica de UI por Sessão =======
        function updateUIBySession() {
            const sess = getSession();
            const isLogged = !!sess;
            if (sessionNameEl) sessionNameEl.textContent = isLogged ? `Olá, ${sess.nome || sess.email || ''}` : '';
            if (loginBtn) loginBtn.style.display = isLogged ? 'none' : 'inline-block';
            if (registerBtn) registerBtn.style.display = isLogged ? 'none' : 'inline-block';
            if (logoutBtn) logoutBtn.style.display = isLogged ? 'inline-block' : 'none';
        }

        // ======= Lógica dos Modais =======
        function openModal(modal) { if (modal) { modal.style.display = 'flex'; } }
        function closeModal(modal) {
            if (modal) {
                modal.style.display = 'none';
                // Reseta o hCaptcha se o modal de registro for fechado
                if (modal.id === 'registerModal' && window.hcaptcha) {
                    try {
                        window.hcaptcha.reset();
                        isCaptchaVerified = false;
                        checkIfRegisterReady();
                    } catch (e) {
                        console.warn("Não foi possível resetar o hCaptcha.");
                    }
                }
            }
        }
        function closeById(id) { const el = document.getElementById(id); if (el) closeModal(el); }

        [loginModal, registerModal].forEach(m => m && m.addEventListener('click', (e) => { if (e.target === m) closeModal(m); }));
        document.addEventListener('keydown', (e) => { if (e.key === 'Escape') { closeModal(loginModal); closeModal(registerModal); } });
        document.querySelectorAll('.close[data-close]').forEach(btn => {
            btn.addEventListener('click', () => closeById(btn.getAttribute('data-close')));
        });

        loginBtn?.addEventListener('click', () => openModal(loginModal));
        registerBtn?.addEventListener('click', () => openModal(registerModal));
        logoutBtn?.addEventListener('click', () => { clearSession(); updateUIBySession(); alert('Você saiu.'); });

        // ======= Lógica de Login =======
        loginForm?.addEventListener('submit', async (e) => {
            e.preventDefault();
            loginError.style.display = 'none';

            const email = (document.getElementById('email').value || '').trim().toLowerCase();
            const senha = document.getElementById('password').value;

            // ===== ADMIN fixo (por enquanto) =====
            if (email === 'planckkokoro@gmail.com' && senha === 'Semprekokoro@#$') {
                setSession({ id: 'admin', email, nome: 'Administrador', role: 'admin' });
                window.location.href = '/admin/index.html';
                return;
            }
// ======= Lógica de Login (via backend) =======
loginForm?.addEventListener('submit', async (e) => {
  e.preventDefault();
  loginError.style.display = 'none';

  const email = (document.getElementById('email').value || '').trim().toLowerCase();
  const senha = document.getElementById('password').value;

  try {
    const resp = await fetch('/api/admin/auth', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ email, senha })
    });
    const data = await resp.json();

    if (!data.ok) {
      loginError.textContent = data.message || 'E-mail ou senha inválidos.';
      loginError.style.display = 'block';
      return;
    }

    // sucesso → salvar sessão
    setSession({ id: data.id, email: data.email, nome: data.nome, role: data.role });
    closeModal(loginModal);
    updateUIBySession();

    // se for admin → redireciona
    if (data.role === 'admin') {
      window.location.href = '/admin/index.html';
    } else {
      window.location.href = '/user/index.html';
    }
  } catch (err) {
    console.error('Erro login', err);
    loginError.textContent = 'Falha ao conectar com o servidor.';
    loginError.style.display = 'block';
  }
});
            // ===== Fluxo antigo (usuário comum, localStorage) =====
            const users = loadUsers();
            const found = users.find(u => (u.email || '').toLowerCase() === email && u.senha === senha);

            if (!found) {
                loginError.textContent = 'E-mail ou senha inválidos.';
                loginError.style.display = 'block';
                return;
            }

            setSession({ id: found.id, email: found.email, nome: found.nome || found.email.split('@')[0], role: 'user' });
            closeModal(loginModal);
            updateUIBySession();
        });

        // ======= Lógica de Cadastro e Força da Senha =======
        const rules = {
            len: s => s.length >= 8,
            upper: s => /[A-Z]/.test(s),
            lower: s => /[a-z]/.test(s),
            digit: s => /\d/.test(s),
            special: s => /[^A-Za-z0-9]/.test(s)
        };

        function setReq(el, ok) {
            if (!el) return;
            const icon = el.querySelector('i');
            if (ok) {
                icon.classList.remove('fa-circle-xmark', 'no');
                icon.classList.add('fa-circle-check', 'ok');
            } else {
                icon.classList.remove('fa-circle-check', 'ok');
                icon.classList.add('fa-circle-xmark', 'no');
            }
        }

        function checkIfRegisterReady() {
            if (!pwInput || !pwConfirm || !registerSubmit) return;
            const s = pwInput.value || '';
            let passed = 0;
            if (rules.len(s)) passed++;
            if (rules.upper(s)) passed++;
            if (rules.lower(s)) passed++;
            if (rules.digit(s)) passed++;
            if (rules.special(s)) passed++;

            const pct = [0, 20, 40, 70, 90, 100][passed];
            if (pwBar) pwBar.style.width = pct + '%';
            if (pwBar) pwBar.style.background = passed <= 2 ? '#ff5858' : (passed === 3 ? '#ffaa3b' : '#74ff9f');
            if (pwHint) pwHint.textContent = passed <= 2 ? 'Senha fraca' : (passed === 3 ? 'Senha média' : 'Senha forte');

            setReq(reqLen, rules.len(s));
            setReq(reqUpper, rules.upper(s));
            setReq(reqLower, rules.lower(s));
            setReq(reqDigit, rules.digit(s));
            setReq(reqSpecial, rules.special(s));

            // Habilita o botão se senha forte, confirmação igual E CAPTCHA VERIFICADO
            const allOk = passed >= 4 && pwInput.value.length >= 8 && pwInput.value === pwConfirm.value && isCaptchaVerified;
            registerSubmit.disabled = !allOk;
        }

        pwInput?.addEventListener('input', checkIfRegisterReady);
        pwConfirm?.addEventListener('input', checkIfRegisterReady);
        // Ouve o evento personalizado do captcha para reavaliar o botão
        document.addEventListener('captchaStateChange', checkIfRegisterReady);

        registerForm?.addEventListener('submit', (e) => {
            e.preventDefault();
            registerError.style.display = 'none';

            // Validação final antes de submeter
            if (registerSubmit.disabled) {
                registerError.textContent = 'Por favor, preencha todos os requisitos e complete o CAPTCHA.';
                registerError.style.display = 'block';
                return;
            }

            const nome = (document.getElementById('newName').value || '').trim();
            const email = (document.getElementById('newEmail').value || '').trim().toLowerCase();
            const senha = pwInput.value;

            const users = loadUsers();
            if (users.some(u => u.email === email)) {
                registerError.textContent = 'Já existe uma conta com este e-mail.';
                registerError.style.display = 'block';
                return;
            }
            const novo = { id: Date.now(), nome, email, senha, createdAt: new Date().toISOString() };
            users.push(novo);
            saveUsers(users);
            setSession({ id: novo.id, email: novo.email, nome: novo.nome || novo.email.split('@')[0] });
            closeModal(registerModal);
            updateUIBySession();
            window.location.href = CADASTRO_PAGE;
        });

        // ======= Lógica do "Olhinho" da Senha =======
        function togglePasswordVisibility(btn) {
            const targetId = btn.getAttribute('data-target');
            const input = document.getElementById(targetId);
            if (!input) return;
            const isPassword = input.type === 'password';
            input.type = isPassword ? 'text' : 'password';
            btn.setAttribute('aria-label', isPassword ? 'Ocultar senha' : 'Mostrar senha');
            btn.innerHTML = isPassword ? '<i class="fa-solid fa-eye-slash"></i>' : '<i class="fa-solid fa-eye"></i>';
        }

        document.querySelectorAll('.password-toggle').forEach(btn => {
            btn.addEventListener('click', () => togglePasswordVisibility(btn));
        });

        // ======= Lógica da Caixa Motivacional =======
        function handleMotivacionalBox() {
            if (!motivacionalBox || !motivacionalCloseBtn) return;
            const KEY = 'kokoro_motivacional_last_close';
            const today = new Date().toDateString();
            const last = localStorage.getItem(KEY);
            if (last === today) {
                motivacionalBox.style.display = 'none';
            } else {
                motivacionalBox.style.display = 'inline-block';
            }
            motivacionalCloseBtn.addEventListener('click', () => {
                motivacionalBox.style.display = 'none';
                localStorage.setItem(KEY, today);
            });
        }

        // ======= Inicialização Geral =======
        updateUIBySession();
        checkIfRegisterReady();
        handleMotivacionalBox();
    });
</script>

<script src="js/captcha.js"></script>
</body>
</html>
