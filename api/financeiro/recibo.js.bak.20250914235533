import { getClient } from '../../lib/db.js';

function fmt(n){return (Number(n)||0).toLocaleString('pt-BR',{style:'currency',currency:'BRL'});}
function isAdmin(req){const s=req.headers['x-admin-secret'];return s && s===process.env.ADMIN_SECRET;}

export default async function handler(req,res){
  const method = req.method;
  if (!['GET','POST'].includes(method)) {
    res.setHeader('Allow','GET, POST'); return res.status(405).json({ok:false,error:'Method not allowed'});
  }

  // Aceita GET (query) ou POST (JSON)
  const src = method === 'GET' ? Object.fromEntries(new URL(req.url, `https://${req.headers.host}`).searchParams) : (req.body||{});
  const { professor_id, valor_pago, metodo='PIX', pago_em, observacao } = src;

  if (!professor_id || !(Number(valor_pago)>0)) {
    return res.status(400).json({ok:false,error:'professor_id e valor_pago são obrigatórios'});
  }

  const client = getClient(); await client.connect();
  try {
    const { rows: profRows } = await client.sql`
      SELECT id, nome, tipo, telefone, email, pix_chave, banco_nome, agencia, conta, favorecido_nome, doc_favorecido
      FROM professores WHERE id=${professor_id} LIMIT 1;`;
    if (!profRows.length) return res.status(404).json({ok:false,error:'Professor não encontrado'});
    const p = profRows[0];

    // PIX da escola (opcional, se tiver settings)
    let orgPix = '—';
    try {
      const { rows: set } = await client.sql`SELECT value FROM settings WHERE key='org_pix_chave' LIMIT 1;`;
      orgPix = set[0]?.value || orgPix;
    } catch(_) {}

    const dt = pago_em ? new Date(pago_em) : new Date();
    const dataBR = dt.toLocaleString('pt-BR',{ timeZone: 'America/Sao_Paulo' });

    const texto = [
      `*Recibo de Repasse*`,
      `Colaborador: ${p.nome} (${p.tipo})`,
      `Valor: ${fmt(valor_pago)}`,
      `Método: ${metodo}`,
      `Data/Hora: ${dataBR}`,
      observacao ? `Obs.: ${observacao}` : null,
      `—`,
      `PIX do colaborador: ${p.pix_chave || '—'}`,
      `Banco: ${p.banco_nome || '—'} / Ag.: ${p.agencia || '—'} / Conta: ${p.conta || '—'}`,
      `Favorecido: ${p.favorecido_nome || '—'} (${p.doc_favorecido || '—'})`,
      `—`,
      `Chave PIX da Planck Kokoro: ${orgPix}`
    ].filter(Boolean).join('\n');

    // Se for POST e tiver admin, devolve o texto igual — (o envio automático é por outros endpoints)
    if (method==='POST' && !isAdmin(req)) return res.status(401).json({ok:false,error:'unauthorized'});

    return res.json({ ok:true, texto, professor: { id:p.id, nome:p.nome, email:p.email, telefone:p.telefone } });
  } catch(e){
    return res.status(500).json({ok:false,error:String(e)});
  } finally {
    await client.end();
  }
}
